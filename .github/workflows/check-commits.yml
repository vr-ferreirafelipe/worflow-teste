name: Check Commit

on:
  workflow_call:
    secrets:
      VR_PACKAGE_TOKEN:
        required: true
    outputs:
      COMMIT_MESSAGES:
        description: "Armazena as messagens de novos commits"
        value: ${{ jobs.check-commit.outputs.COMMIT_MESSAGES }}
      HAS_CHANGES:
        description: "Verifica se existem novos commits"
        value: ${{ jobs.check-commit.outputs.HAS_CHANGES }}

jobs:
  check-commit:
    name: Check Commit
    runs-on: ubuntu-latest
    outputs:
      HAS_CHANGES: ${{ steps.check_changes.outputs.HAS_CHANGES }}
      COMMIT_MESSAGES: ${{ steps.get_commit.outputs.COMMIT_MESSAGES }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.VR_PACKAGE_TOKEN }}
          fetch-depth: 0
          ref: main

      - name: Check Changes
        id: check_changes
        run: |
          # verifica se ja existem TAGS
          if[-z "$(git show-ref --tags)"]; then
            IS_FIRST_TAG="true"
          fi

          # Obtenha a quantidade de novos commits
          # Se IS_FIRST_TAG retornar vazio considera os commits da branch main
          # Se não considera os commits da feitos depois da ultima TAG
          COMMIT_COUNT=$([ -z "IS_FIRST_TAG" ] && echo "$(git rev-list main --count)" || echo "$(git rev-list $(git describe --tags --abbrev=0 @^)..@ --count)")

          # verifica se existem commits pendente
          if [ "$COMMIT_COUNT" -gt 0 ]; then
            echo "::set-output name=HAS_CHANGES::"true""
          fi

      - name: Get Commit Messages
        id: get_commit
        if: steps.check_changes.outputs.HAS_CHANGES
        run: |          # Obtenha as mensagens de commit desde o último tag
          # COMMIT_MESSAGES=$(git log $(git describe --tags --abbrev=0 @^)..@ --pretty=format:%B)
          COMMIT_MESSAGES=$(git log $(git describe --tags --abbrev=0 @^)..@ --pretty=format:%B | tr '\n' '|')

          # Set output COMMIT_MESSAGES
          echo "::set-output name=COMMIT_MESSAGES::$COMMIT_MESSAGES"
