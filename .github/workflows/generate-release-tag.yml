name: Generate Release Tag

on:
  workflow_call:
    secrets:
      VR_PACKAGE_TOKEN:
        required: true
    inputs:
      COMMIT_MESSAGES:
        required: true
        type: string
    outputs:
      NEW_VERSION:
        description: "Armazena tag de nova RELEASE"
        value: ${{ jobs.generate-version.outputs.NEW_VERSION }}
      HAS_RELEASE:
        description: "Valida se os commits devem gerar novas RELEASE"
        value: ${{ jobs.generate-version.outputs.HAS_RELEASE }}


jobs:
  generate-version:
    name: Generate Tag
    runs-on: ubuntu-latest
    outputs:
      NEW_VERSION: ${{ steps.calculate_next_version.outputs.NEW_VERSION }}
      HAS_RELEASE: ${{ steps.calculate_next_version.outputs.HAS_RELEASE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.VR_PACKAGE_TOKEN }}
          fetch-depth: 0
          ref: main

      - name: Get Last Tag 
        id: get_last_version
        run: |
          # Obtém a lista de tags e conta o número de linhas (cada linha é uma tag)
          TAG_COUNT=$(git tag | wc -l)

          if [ "$TAG_COUNT" -eq 0 ]; then
            # define versão inicial "0.0.0"
            LAST_VERSION="0.0.0"
          else
            # Inicialize uma variável de versão com a última tag
            LAST_VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')
          fi

          echo "::set-output name=last_version::$LAST_VERSION"

      - name: Prepare Next Version TAG 
        id: calculate_next_version
        if: ${{ steps.get_last_version.outputs.LAST_VERSION }}
        run: |
          COMMIT_MESSAGES="${{ inputs.COMMIT_MESSAGES }}"
          lAST_VERSION=${{ steps.get_last_version.outputs.last_version }}

          # Separa a tag em partes MAJOR, MINOR e PATCH
          LAST_MAJOR_VERSION=$(echo "$lAST_VERSION" | cut -d. -f1)
          LAST_MINOR_VERSION=$(echo "$lAST_VERSION" | cut -d. -f2)
          LAST_PATCH_VERSION=$(echo "$lAST_VERSION" | cut -d. -f3)

          # Ativa a correspondência insensível a maiúsculas e minúsculas
          shopt -s nocasematch

          if [[ $COMMIT_MESSAGES =~ "BREAKING CHANGE" ]]; then
            # Gera nova tag MAJOR
            NEW_VERSION="$((LAST_MAJOR_VERSION + 1)).0.0"
            HAS_RELEASE=true
          elif [[ $COMMIT_MESSAGES =~ "feat" ]]; then
            # Gera nova tag MINOR
            NEW_VERSION="$LAST_MAJOR_VERSION.$((LAST_MINOR_VERSION + 1)).0"
            HAS_RELEASE=true
          elif [[ $COMMIT_MESSAGES =~ "fix" ]]; then
            # Gera nova tag patch
            NEW_VERSION="$LAST_MAJOR_VERSION.$LAST_MINOR_VERSION.$((LAST_PATCH_VERSION + 1))"
            HAS_RELEASE=true
          else
            # Nenhum commit gerará uma nova release
            echo "Nenhum commit nesta push gerará uma nova release."
          fi 

          echo "::set-output name=HAS_RELEASE::$HAS_RELEASE"
          echo "::set-output name=NEW_VERSION::$NEW_VERSION"
        shell: bash

      - name: Validate Next Version TAG 
        id: validate_next_version_tag
        if: steps.calculate_next_version.outputs.HAS_RELEASE
        run: |
          LAST_VERSION=${{ steps.get_last_version.outputs.last_version }}
          echo "LAST_VERSION $LAST_VERSION"
          LAST_MAJOR_VERSION=$(echo "$LAST_VERSION" | cut -d. -f1)
          LAST_MINOR_VERSION=$(echo "$LAST_VERSION" | cut -d. -f2)
          LAST_PATCH_VERSION=$(echo "$LAST_VERSION" | cut -d. -f3)
          
          NEW_VERSION=${{ steps.calculate_next_version.outputs.NEW_VERSION }}
          echo "NEW_VERSION $NEW_VERSION"
          NEW_MAJOR_VERSION=$(echo "$NEW_VERSION" | cut -d. -f1)
          NEW_MINOR_VERSION=$(echo "$NEW_VERSION" | cut -d. -f2)
          NEW_PATCH_VERSION=$(echo "$NEW_VERSION" | cut -d. -f3)

          if [[
            ($NEW_MAJOR_VERSION -lt $LAST_MAJOR_VERSION) ||
            ($NEW_MAJOR_VERSION -eq $LAST_MAJOR_VERSION && $NEW_MINOR_VERSION -lt $LAST_MINOR_VERSION) ||
            ($NEW_MAJOR_VERSION -eq $LAST_MAJOR_VERSION && $NEW_MINOR_VERSION -eq $LAST_MINOR_VERSION && $NEW_PATCH_VERSION -le $LAST_PATCH_VERSION)
          ]]; then
            echo "A nova versão não é superior à última versão. Saindo do fluxo de trabalho."
            exit 1
          fi
        shell: bash
