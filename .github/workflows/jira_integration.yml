name: JIRA API - Integração

on:
  workflow_call:
    secrets:
      VR_PACKAGE_TOKEN:
        required: true
      JIRA_BASE_URL:
        required: true
      JIRA_USER_EMAIL:
        required: true
      JIRA_API_TOKEN:
        required: true
    inputs:
      JIRA_ISSUE_PREFIX:
        required: true
        type: string
      COMMIT_MESSAGES:
        required: true
        type: string
      NEW_VERSION:
        required: true
        type: string
      HAS_NEW_RELEASE:
        required: true
        type: string
    outputs:
      ISSUE_KEYS:
        description: "Armazena os ids das tarefas encontrados nos commits."
        value: ${{ jobs.get_and_update_issue.outputs.ISSUE_KEYS }}
      BUG_FIX_INFO:
        description: "Armazena os dados de correções documentado no jira."
        value: ${{ jobs.get_and_update_issue.outputs.BUG_FIX_INFO }}
      FEAT_INFO:
        description: "Armazena os dados de novos recursos documentado no jira."
        value: ${{ jobs.get_and_update_issue.outputs.FEAT_INFO }}
      BREAK_CHANGE_INFO:
        description: "Armazena os dados de break change documentado no jira."
        value: ${{ jobs.get_and_update_issue.outputs.BREAK_CHANGE_INFO }}

jobs:
  get_and_update_issue:
    name: Buscar informações e Atualizar JIRA
    runs-on: ubuntu-latest
    outputs:
      ISSUE_KEYS: ${{ steps.find_issue_key.outputs.ISSUE_KEYS }}
      BUG_FIX_INFO: ${{ steps.update_issues.outputs.BUG_FIX_INFO }}
      FEAT_INFO: ${{ steps.update_issues.outputs.FEAT_INFO }}
      BREAK_CHANGE_INFO: ${{ steps.update_issues.outputs.BREAK_CHANGE_INFO }}

    steps:
    - name: Find issue key from commit messages
      id: find_issue_key
      if: inputs.HAS_NEW_RELEASE
      run: |
        COMMIT_MESSAGES="${{ inputs.COMMIT_MESSAGES }}"

        # Encontra nas mensagens de commits as tarefas referenciadas.
        ALL_ISSUE_KEYS=$(echo "$COMMIT_MESSAGES" | grep -o '${{ inputs.JIRA_ISSUE_PREFIX }}-[0-9]\+')
        
        # Remove resultados diplicados
        DISTINCT_ISSUE_KEYS=$(echo "$ALL_ISSUE_KEYS" | sort | uniq)
        echo $DISTINCT_ISSUE_KEYS

        if [ -n "$DISTINCT_ISSUE_KEYS" ]; then
          echo "::set-output name=ISSUE_KEYS::"$DISTINCT_ISSUE_KEYS""
        else
          echo "Nenhuma tarefa foi referencia nos ultimos commits."
        fi


    # - name: Update Issues from JIRA
    #   run: |
    #     # Recupere as variáveis de ambiente
    #     JIRA_USERNAME=${{ secrets.JIRA_USER_EMAIL }}
    #     JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }}
    #     JIRA_BASE_URL=${{ secrets.JIRA_BASE_URL }}

    #     ISSUE_KEYS="${{ steps.find_issue_key.outputs.ISSUE_KEYS }}"
    #     ISSUE_JSON=$(curl -s -u $JIRA_USERNAME:$JIRA_API_TOKEN \
    #       -X GET "$JIRA_BASE_URL/rest/api/2/issue/MOB-1094")

    #     echo $ISSUE_JSON


    - name: Update Issues from JIRA
      id: update_issues
      if: steps.find_issue_key.outputs.ISSUE_KEYS
      run: |
        # Recupere as variáveis de ambiente
        JIRA_USERNAME=${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }}
        JIRA_BASE_URL=${{ secrets.JIRA_BASE_URL }}

        # Recuperar os inputs
        NEW_VERSION=${{ inputs.NEW_VERSION }}

        # customfield_10112 = Release Tag
        # customfield_10115 = [DOC] - Break Change
        # customfield_10113 = [DOC] - Correções realizadas
        # customfield_10114 = [DOC] - Recursos adicionados

        # Definir os compos jira
        JIRA_FIELDS="customfield_10112,customfield_10115,customfield_10113,customfield_10114"

        ISSUE_KEYS="${{ steps.find_issue_key.outputs.ISSUE_KEYS }}"

        BREAK_CHANGE_INFO=""
        BUG_FIX_INFO=""
        FEAT_INFO=""

        for ISSUE_KEY in $ISSUE_KEYS; do
          echo $ISSUE_KEY

          # Busca tarefa pelo JIRA API.
          ISSUE_JSON=$(curl -s -u $JIRA_USERNAME:$JIRA_API_TOKEN \
            -X GET "$JIRA_BASE_URL/rest/api/2/issue/$ISSUE_KEY?fields=$JIRA_FIELDS")

          # Desestrutura o objeto de resposta
          ISSUE_BREAK_CHANGE_INFO=$(echo $ISSUE_JSON | jq -r '.fields.customfield_10115')
          ISSUE_BREAK_CHANGE_INFO=$(echo "$ISSUE_BREAK_CHANGE_INFO" | sed 's/^null$/''/')

          ISSUE_BUG_FIX_INFO=$(echo $ISSUE_JSON | jq -r '.fields.customfield_10113')
          ISSUE_BUG_FIX_INFO=$(echo "$ISSUE_BUG_FIX_INFO" | sed 's/^null$/''/')

          ISSUE_FEAT_INFO=$(echo $ISSUE_JSON | jq -r '.fields.customfield_10114')
          ISSUE_FEAT_INFO=$(echo "$ISSUE_FEAT_INFO" | sed 's/^null$/''/')

          # Verifique se a saída do jq não está vazia
          if [ -n "$ISSUE_BREAK_CHANGE_INFO" ]; then
            # Formata quebras de linha
            ISSUE_BREAK_CHANGE_INFO=$(echo "$ISSUE_BREAK_CHANGE_INFO" | tr '\n' '|')
            BREAK_CHANGE_INFO="${BREAK_CHANGE_INFO} $ISSUE_BREAK_CHANGE_INFO"
          fi

          if [ -n "$ISSUE_BUG_FIX_INFO" ]; then
            # Formata quebras de linha
            ISSUE_BUG_FIX_INFO=$(echo "$ISSUE_BUG_FIX_INFO" | tr '\n' '|')
            BUG_FIX_INFO="${BUG_FIX_INFO} $ISSUE_BUG_FIX_INFO"
          fi

          if [ -n "$ISSUE_FEAT_INFO" ]; then
            # Formata quebras de linha
            ISSUE_FEAT_INFO=$(echo "$ISSUE_FEAT_INFO" | tr '\n' '|')
            FEAT_INFO="${FEAT_INFO} $ISSUE_FEAT_INFO"
          fi


          # Altera o titlul da tarefa concatenando a release.
          curl -u $JIRA_USERNAME:$JIRA_API_TOKEN \
              -X PUT "$JIRA_BASE_URL/rest/api/2/issue/$ISSUE_KEY" \
              -H "Content-Type: application/json" \
              --data '{
                "fields": {
                  "customfield_10112": "'"${NEW_VERSION}"'"
                }
              }'
        done

        echo $BREAK_CHANGE_INFO
        echo $BUG_FIX_INFO
        echo $FEAT_INFO

        echo "::set-output name=BREAK_CHANGE_INFO::$BREAK_CHANGE_INFO"
        echo "::set-output name=BUG_FIX_INFO::$BUG_FIX_INFO"
        echo "::set-output name=FEAT_INFO::$FEAT_INFO"
      shell: bash