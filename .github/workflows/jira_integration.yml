name: JIRA API - Integração

on:
  workflow_call:
    secrets:
      VR_PACKAGE_TOKEN:
        required: true
      JIRA_BASE_URL:
        required: true
      JIRA_USER_EMAIL:
        required: true
      JIRA_API_TOKEN:
        required: true
    inputs:
      JIRA_ISSUE_PREFIX:
        required: true
        type: string
      COMMIT_MESSAGES:
        required: true
        type: string
      NEW_VERSION:
        required: true
        type: string
      HAS_NEW_RELEASE:
        required: true
        type: string

jobs:
  get_and_update_issue:
    name: Buscar informações e Atualizar JIRA
    runs-on: ubuntu-latest

    steps:
    - name: Get issue key from commit messages
      id: get_issue_key
      if: inputs.HAS_NEW_RELEASE
      run: |
        COMMIT_MESSAGES="${{ inputs.COMMIT_MESSAGES }}"

        # Encontra nas mensagens de commits as tarefas referenciadas.
        ALL_ISSUE_KEYS=$(echo "$COMMIT_MESSAGES" | grep -o '${{ inputs.JIRA_ISSUE_PREFIX }}-[0-9]\+')
        
        # Remove resultados diplicados
        DISTINCT_ISSUE_KEYS=$(echo "$ALL_ISSUE_KEYS" | sort | uniq)
        echo $DISTINCT_ISSUE_KEYS

        if [ -n "$DISTINCT_ISSUE_KEYS" ]; then
          echo "::set-output name=ISSUE_KEYS::"$DISTINCT_ISSUE_KEYS""
        else
          echo "Nenhuma tarefa foi referencia nos ultimos commits."
        fi

    - name: GET and Put Jira Issue
      id: get_put_jira_issue
      if: steps.get_issue_key.outputs.ISSUE_KEYS
      run: |
        # Recupere as variáveis de ambiente
        JIRA_USERNAME=${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }}
        JIRA_BASE_URL=${{ secrets.JIRA_BASE_URL }}

        # Recuperar os inputs
        NEW_VERSION=${{ inputs.NEW_VERSION }}

        # Definir os compos jira
        JIRA_FIELDS="summary,customfield_10037"

        ISSUE_KEYS="${{ steps.get_issue_key.outputs.ISSUE_KEYS }}"

        for ISSUE_KEY in $ISSUE_KEYS; do
          echo $ISSUE_KEY

          # Busca tarefa pelo JIRA API.
          ISSUE_JSON=$(curl -s -u $JIRA_USERNAME:$JIRA_API_TOKEN \
            -X GET "$JIRA_BASE_URL/rest/api/2/issue/$ISSUE_KEY?fields=$JIRA_FIELDS")

          # Desestrutura o objeto de resposta
          TITLE=$(echo $ISSUE_JSON | jq -r '.fields.summary')
          DOC_INFO=$(echo $ISSUE_JSON | jq -r '.fields.customfield_10037')

          # Altera o titlul da tarefa concatenando a release.
          curl -u $JIRA_USERNAME:$JIRA_API_TOKEN \
              -X PUT "$JIRA_BASE_URL/rest/api/2/issue/$ISSUE_KEY" \
              -H "Content-Type: application/json" \
              --data '{
                "fields": {
                  "summary": "'"${TITLE} (${NEW_VERSION})"'"
                }
              }'

          echo "::set-output name=TITLE::$(echo $ISSUE_JSON | jq -r '.fields.summary')"
          echo "::set-output name=DOC_INFO::$(echo $ISSUE_JSON | jq -r '.fields.customfield_10037')"
        done

    - name: ECHO Jira Issue
      run: |
        TITLE="${{ steps.get_put_jira_issue.outputs.TITLE }}"
        DOC_INFO="${{ steps.get_put_jira_issue.outputs.DOC_INFO }}"

        echo "$TITLE"
        echo "$DOC_INFO"